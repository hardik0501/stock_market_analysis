{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4ee18273",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "* Running on local URL:  http://127.0.0.1:7867\n",
      "* To create a public link, set `share=True` in `launch()`.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><iframe src=\"http://127.0.0.1:7867/\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import gradio as gr\n",
    "from datetime import datetime, timedelta\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM, Dense\n",
    "from fpdf import FPDF\n",
    "import os\n",
    "\n",
    "from openai import OpenAI\n",
    "openai_api_key = \"AIzaSyBhpRkOnmcurInRavgzB2nc0UkLulq7yYo\" \n",
    "client = OpenAI(api_key=openai_api_key)\n",
    "\n",
    "stock_list = [\n",
    "    \"^NSEI\",\n",
    "    \"^BSESN\",\n",
    "    \"^NSEBANK\",\n",
    "    \"^CNXIT\",\n",
    "    \"^NSEFMC\",\n",
    "    \"^NSEPHARMA\",\n",
    "    \"^NSEINFRA\",\n",
    "    \"RELIANCE.NS\",\n",
    "    \"TCS.NS\",\n",
    "    \"HDFCBANK.NS\",\n",
    "    \"INFY.NS\",\n",
    "    \"ICICIBANK.NS\",\n",
    "    \"HINDUNILVR.NS\",\n",
    "    \"KOTAKBANK.NS\",\n",
    "    \"SBIN.NS\",\n",
    "    \"BAJFINANCE.NS\",\n",
    "    \"HDFC.NS\",\n",
    "    \"BHARTIARTL.NS\",\n",
    "    \"ITC.NS\",\n",
    "    \"ASIANPAINT.NS\",\n",
    "    \"LT.NS\",\n",
    "    \"AXISBANK.NS\",\n",
    "    \"MARUTI.NS\",\n",
    "    \"ULTRACEMCO.NS\",\n",
    "    \"DIVISLAB.NS\",\n",
    "    \"POWERGRID.NS\",\n",
    "    \"BAJAJFINSV.NS\",\n",
    "    \"TITAN.NS\",\n",
    "    \"SUNPHARMA.NS\",\n",
    "    \"DRREDDY.NS\",\n",
    "    \"GRASIM.NS\",\n",
    "    \"NTPC.NS\",\n",
    "    \"WIPRO.NS\",\n",
    "    \"COALINDIA.NS\",\n",
    "    \"HCLTECH.NS\",\n",
    "    \"EICHERMOT.NS\",\n",
    "    \"JSWSTEEL.NS\",\n",
    "    \"ONGC.NS\",\n",
    "    \"TATASTEEL.NS\",\n",
    "    \"TECHM.NS\",\n",
    "    \"BPCL.NS\",\n",
    "    \"M&M.NS\",\n",
    "    \"ADANIPORTS.NS\",\n",
    "    \"HEROMOTOCO.NS\",\n",
    "    \"INDUSINDBK.NS\",\n",
    "    \"CIPLA.NS\",\n",
    "    \"BRITANNIA.NS\",\n",
    "    \"VEDL.NS\",\n",
    "    \"IOC.NS\",\n",
    "    \"SHREECEM.NS\",\n",
    "    \"BAJAJ-AUTO.NS\",\n",
    "    \"HDFCLIFE.NS\",\n",
    "    \"TATAMOTORS.NS\",\n",
    "    \"GAIL.NS\",\n",
    "    \"DLF.NS\",\n",
    "    \"UBL.NS\",\n",
    "    \"HINDALCO.NS\",\n",
    "    \"MUTHOOTFIN.NS\",\n",
    "    \"APOLLOHOSP.NS\",\n",
    "    \"SBILIFE.NS\",\n",
    "    \"TATACONSUM.NS\",\n",
    "    \"BAJAJHLDNG.NS\",\n",
    "    \"JINDALSTEL.NS\",\n",
    "    \"HINDPETRO.NS\",\n",
    "    \"AMBUJACEM.NS\",\n",
    "    \"LTI.NS\",\n",
    "    \"SHRIRAMFIN.NS\",\n",
    "    \"HAVELLS.NS\",\n",
    "    \"LUPIN.NS\",\n",
    "    \"DMART.NS\",\n",
    "    \"GODREJCP.NS\",\n",
    "    \"ICICIPRULI.NS\",\n",
    "    \"COLPAL.NS\",\n",
    "    \"MCDOWELL-N.NS\",\n",
    "    \"SIEMENS.NS\",\n",
    "    \"PIDILITIND.NS\",\n",
    "    \"BANDHANBNK.NS\",\n",
    "    \"AUROPHARMA.NS\",\n",
    "    \"NESTLEIND.NS\",\n",
    "    \"SRF.NS\",\n",
    "    \"CESC.NS\",\n",
    "    \"CROMPTON.NS\",\n",
    "    \"BOSCHLTD.NS\",\n",
    "    \"PEL.NS\",\n",
    "    \"BIOCON.NS\",\n",
    "    \"ABB.NS\",\n",
    "    \"AMARAJABAT.NS\",\n",
    "    \"LICHSGFIN.NS\",\n",
    "    \"BANKBARODA.NS\",\n",
    "    \"GLENMARK.NS\",\n",
    "    \"INDIGO.NS\",\n",
    "    \"CANBK.NS\",\n",
    "    \"EXIDEIND.NS\",\n",
    "    \"DABUR.NS\",\n",
    "    \"ICICIGI.NS\",\n",
    "    \"TATAPOWER.NS\",\n",
    "    \"UPL.NS\",\n",
    "    \"M&MFIN.NS\",\n",
    "    \"ADANIGREEN.NS\",\n",
    "    \"BERGEPAINT.NS\",\n",
    "    \"TRENT.NS\",\n",
    "    \"ESCORTS.NS\",\n",
    "    \"NMDC.NS\",\n",
    "    \"PAGEIND.NS\",\n",
    "    \"VINATIORGA.NS\",\n",
    "    \"MARICO.NS\",\n",
    "    \"CASTROLIND.NS\",\n",
    "    \"GLAXO.NS\",\n",
    "    \"INDUSTOWER.NS\",\n",
    "    \"TATACHEM.NS\"\n",
    "]\n",
    "\n",
    "def create_lstm_model(input_shape):\n",
    "    model = Sequential()\n",
    "    model.add(LSTM(units=50, return_sequences=True, input_shape=input_shape))\n",
    "    model.add(LSTM(units=50))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "    return model\n",
    "\n",
    "def analyze_stock(ticker):\n",
    "    try:\n",
    "        stock = yf.Ticker(ticker)\n",
    "        df = stock.history(period=\"6mo\")\n",
    "        if df.empty:\n",
    "            return \"Invalid stock symbol\", None, None\n",
    "\n",
    "        df.reset_index(inplace=True)\n",
    "        df['MA20'] = df['Close'].rolling(window=20).mean()\n",
    "        df['Upper'] = df['MA20'] + 2 * df['Close'].rolling(window=20).std()\n",
    "        df['Lower'] = df['MA20'] - 2 * df['Close'].rolling(window=20).std()\n",
    "\n",
    "        plt.figure(figsize=(12, 6))\n",
    "        plt.plot(df['Date'], df['Close'], label='Close', color='blue')\n",
    "        plt.plot(df['Date'], df['MA20'], label='MA20', color='orange')\n",
    "        plt.plot(df['Date'], df['Upper'], label='Upper Band', linestyle='--', color='green')\n",
    "        plt.plot(df['Date'], df['Lower'], label='Lower Band', linestyle='--', color='red')\n",
    "        plt.title(f\"{ticker.upper()} - Price with Moving Average & Bollinger Bands\")\n",
    "        plt.xlabel('Date')\n",
    "        plt.ylabel('Price')\n",
    "        plt.legend()\n",
    "        plt.tight_layout()\n",
    "        img_path = \"stock_plot.png\"\n",
    "        plt.savefig(img_path)\n",
    "        plt.close()\n",
    "\n",
    "        close_data = df[['Close']].values\n",
    "        scaler = MinMaxScaler()\n",
    "        scaled_data = scaler.fit_transform(close_data)\n",
    "\n",
    "        X_train, y_train = [], []\n",
    "        for i in range(60, len(scaled_data)-7):\n",
    "            X_train.append(scaled_data[i-60:i])\n",
    "            y_train.append(scaled_data[i])\n",
    "\n",
    "        X_train, y_train = np.array(X_train), np.array(y_train)\n",
    "\n",
    "        model = create_lstm_model((X_train.shape[1], 1))\n",
    "        model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=0)\n",
    "\n",
    "        last_60 = scaled_data[-60:]\n",
    "        input_seq = last_60\n",
    "        future_preds = []\n",
    "\n",
    "        for _ in range(7):\n",
    "            pred = model.predict(np.expand_dims(input_seq, axis=0), verbose=0)\n",
    "            future_preds.append(pred[0][0])\n",
    "            pred_reshaped = np.reshape(pred, (1, 1))\n",
    "            input_seq = np.vstack((input_seq[1:], pred_reshaped))\n",
    "\n",
    "        future_prices = scaler.inverse_transform(np.array(future_preds).reshape(-1, 1)).flatten()\n",
    "        prediction_text = \"LSTM Prediction for Next 7 Days:\\n\"\n",
    "        for i, price in enumerate(future_prices):\n",
    "            day = (datetime.now() + timedelta(days=i + 1)).strftime('%Y-%m-%d')\n",
    "            prediction_text += f\"{day}: Rs. {price:.2f}\\n\"\n",
    "\n",
    "        pdf_path = \"stock_report.pdf\"\n",
    "        pdf = FPDF()\n",
    "        pdf.add_page()\n",
    "        pdf.set_font(\"Arial\", size=12)\n",
    "        pdf.cell(200, 10, txt=f\"Stock Report: {ticker.upper()}\", ln=True)\n",
    "        pdf.ln()\n",
    "        pdf.multi_cell(0, 10, prediction_text)\n",
    "        pdf.image(img_path, x=10, y=60, w=190)\n",
    "        pdf.output(pdf_path)\n",
    "\n",
    "        return prediction_text, img_path, pdf_path\n",
    "\n",
    "    except Exception as e:\n",
    "        return f\"Error: {e}\", None, None\n",
    "\n",
    "ui = gr.Interface(\n",
    "    fn=analyze_stock,\n",
    "    inputs=gr.Dropdown(choices=stock_list, label=\"Select Stock Symbol\"),\n",
    "    outputs=[\n",
    "        gr.Textbox(label=\"AI Analysis & Prediction\"),\n",
    "        gr.Image(label=\"Stock Chart\"),\n",
    "        gr.File(label=\"Download PDF Report\")\n",
    "    ],\n",
    "    title=\"AI Stock Market Analyzer (India Market)\",\n",
    "    description=\"Select an Indian stock to analyze trends using LSTM, Moving Averages, Bollinger Bands, and export full report.\"\n",
    ")\n",
    "\n",
    "ui.launch()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "038a026c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
